{"version":3,"sources":["data/activity_data.js","components/Badge.js","components/Activity.js","components/Timeline.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["ActivityData","title","type","date","location","text","this","Seminar","Personal","activityData","Badge","className","Activity","Timeline","map","item","i","key","Header","href","src","width","height","alt","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OAAMA,EACF,WAAYC,EAAOC,EAAMC,EAAMC,EAAUC,GAAO,oBAC5CC,KAAKL,MAAQA,EACbK,KAAKJ,KAAOA,EACZI,KAAKH,KAAOA,EACZG,KAAKF,SAAWA,EAChBE,KAAKD,KAAOA,GAMPE,EAAU,YACVC,EAAW,4BAGXC,EAAe,CACxB,IAAIT,EAAa,aAPK,YAOqB,wBAAyB,eAAgB,sMACpF,IAAIA,EAAa,uBAPQ,uBAO+B,wBAAyB,oBAAqB,kIACtG,IAAIA,EAAa,0BAA2BO,EAAS,aAAc,MAAO,yLAC1E,IAAIP,EAAa,qCAAsCO,EAAS,aAAc,MAAO,mIACrF,IAAIP,EAAa,wBAAyBO,EAAS,aAAc,MAAO,yKACxE,IAAIP,EAAa,eAAgBO,EAAS,aAAc,MAAO,2LAC/D,IAAIP,EAAa,YAAaO,EAAS,aAAc,MAAO,gKAC5D,IAAIP,EAAa,cAAeQ,EAAU,aAAc,eAAgB,yLACxE,IAAIR,EAAa,oBAfK,YAe4B,eAAgB,mCAAoC,+JACtG,IAAIA,EAAa,oCAAqCO,EAAS,MAAO,aAAc,uIACpF,IAAIP,EAAa,WAbK,qBAamB,aAAc,eAAgB,wJCU5DU,EAlCD,SAAC,GAAY,IAAXR,EAAU,EAAVA,KACZ,MDMsB,cCNlBA,EAEI,yBAAKS,UAAU,6BACX,uBAAGA,UAAU,kBDIA,yBCDdT,EAEH,yBAAKS,UAAU,gCACX,uBAAGA,UAAU,iBAGdT,IAASK,EAEZ,yBAAKI,UAAU,0BACX,uBAAGA,UAAU,sBAGdT,IAASM,EAEZ,yBAAKG,UAAU,2BACX,uBAAGA,UAAU,gBDXH,uBCcXT,EAEH,yBAAKS,UAAU,6BACX,uBAAGA,UAAU,wBAHlB,GCTIC,EAhBE,SAAC,GAA+B,IAA9BX,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,KAAME,EAAU,EAAVA,KAElC,OACI,yBAAKM,UAAU,iBACX,kBAAC,EAAD,CAAOT,KAAMA,IACb,yBAAKS,UAAU,uBACX,yBAAKA,UAAU,aACX,4BAAKV,GACL,0BAAMU,UAAU,cAAcR,GAC9B,uBAAGQ,UAAU,OAAON,OCIzBQ,EAZE,WACb,OACI,yBAAKF,UAAU,YAEPF,EAAaK,KAAI,SAACC,EAAMC,GACpB,OAAO,kBAAC,EAAD,CAAUC,IAAKD,EAAGf,MAAOc,EAAKd,MAAOC,KAAMa,EAAKb,KAAMC,KAAMY,EAAKZ,KAAME,KAAMU,EAAKV,YCK9Fa,EAZA,WACX,OACI,yBAAKP,UAAU,2CACX,uBAAGA,UAAU,eAAeQ,KAAK,KAC7B,yBAAKC,IAAI,sBAAsBC,MAAM,KAAKC,OAAO,KAC5CX,UAAU,2BAA2BY,IAAI,KAC9C,0BAAMZ,UAAU,QAAhB,qBCQDa,MAXf,WACI,OACI,oCACI,kBAAC,EAAD,MACA,yBAAKb,UAAU,aACX,kBAAC,EAAD,SCEIc,QACW,cAA7BC,OAAOtB,SAASuB,UAEe,UAA7BD,OAAOtB,SAASuB,UAEhBD,OAAOtB,SAASuB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3e75a456.chunk.js","sourcesContent":["class ActivityData {\r\n    constructor(title, type, date, location, text) {\r\n        this.title = title;\r\n        this.type = type;\r\n        this.date = date;\r\n        this.location = location;\r\n        this.text = text;\r\n    }\r\n}\r\n\r\nexport const Innovation = \"Innovatie\";\r\nexport const International = \"Internationalisering\";\r\nexport const Seminar = \"Seminarie\";\r\nexport const Personal = \"Persoonlijke ontwikkeling\";\r\nexport const Engagement = \"Student engagement\";\r\n\r\nexport const activityData = [\r\n    new ActivityData(\"Care-athon\", Innovation, \"20/02/2019-21/02/2019\", \"Corda Campus\", \"G-karate Vlaanderen zocht een manier om de grondbeginselen van karate over te brengen aan kinderen, jongeren en volwassenen met speciale behoeften. Hier hebben wij twee dagen over gebrainstormd.\"),\r\n    new ActivityData(\"Studiereis Duitsland\", International, \"12/02/2020-17/02/2020\", \"Paderborn/Berlijn\", \"De eerste twee dagen hebben wij een makathon gedaan op Paderborn University. Daarna volgde een toeristische reis door Berlijn.\"),\r\n    new ActivityData(\"Appfoundry React Native\", Seminar, \"18/12/2019\", \"PXL\", \"Dit was een seminarie om kennis te maken met de React Native, de cross-platform mobile oplossing van Facebook. Hier hebben we een demo uitgewerkt en enkele best practices overlopen.\"),\r\n    new ActivityData(\"SOGETI Testing for Robotics and AI\", Seminar, \"04/12/2019\", \"PXL\", \"In dit zeer interactieve seminarie hebben we aan de hand van een robotje nagedacht over kwaliteitscontrole voor Robotics en AI.\"),\r\n    new ActivityData(\"The Studio BLockchain\", Seminar, \"27/11/2019\", \"PXL\", \"The Studio is een onderdeel van Belfius. Zij kwamen uitleggen waarom blockchain op niet alleen op technisch gebied uitdagingen heeft, maar ook aan de business zijde.\"),\r\n    new ActivityData(\"Infofarm IOT\", Seminar, \"13/11/2019\", \"PXL\", \"Dit seminarie besprak de toenemende populariteit van IoT. Er was eerst een lab gepland, maar door de grote opkomst hebben we enkel een demo gehad aan de hand van een Jupyter Notebook.\"),\r\n    new ActivityData(\"Chat bots\", Seminar, \"06/11/2019\", \"PXL\", \"Interacto heeft ons hier uitgelegd hoe wij een chatbot zelf konden maken. Wij hebben toen ook zelf onze eigen bot gemaakt aan de hand van de Google Console.\"),\r\n    new ActivityData(\"POP-Sessies\", Personal, \"23/10/2019\", \"Corda Campus\", \"Deze korte POP-sessies “My Team and I” dienden als inleiding voor het IT-project. Samen met onze projectgroep leerden we over teamwerk, samenwerking, feedback en openheid.\"),\r\n    new ActivityData(\"Innovatieroute AI\", Innovation, \"Corda Campus\", \"25/09/2019-26/09/2019 02/10/2019\", \"Deze tweedelige innovatieroute bestond uit het trainen van models in Python, maar ook uit het gebruiken van AWS-services om machine learning uit te voeren.\"),\r\n    new ActivityData(\"Digital@Breakfast: Facebook en ik\", Seminar, \"PXL\", \"22/05/2019\", \"In dit ontbijt-seminarie kwam Tim Verheyden zijn VRT-serie Facebook en ik toelichten. Hierbij liet hij enkele beeldfragmenten zien.\"),\r\n    new ActivityData(\"VPW 2019\", Engagement, \"20/02/2019\", \"AP Antwerpen\", \"Vlaamse programmeerwedstrijd 2019. Studenten hebben drie uur de tijd om een reeks oefeningen op te lossen op één laptop in groepjes van drie.\"),\r\n];\r\n","import React from 'react';\r\nimport {Innovation, International, Seminar, Personal, Engagement} from \"../data/activity_data\";\r\n\r\nconst Badge = ({type}) => {\r\n    if (type === Innovation) {\r\n        return (\r\n            <div className=\"timeline-badge-innovation\">\r\n                <i className=\"fas fa-flask\"/>\r\n            </div>\r\n        )\r\n    } else if (type === International) {\r\n        return (\r\n            <div className=\"timeline-badge-international\">\r\n                <i className=\"fa fa-plane\"/>\r\n            </div>\r\n        )\r\n    } else if (type === Seminar) {\r\n        return (\r\n            <div className=\"timeline-badge-seminar\">\r\n                <i className=\"fa fa-microphone\"/>\r\n            </div>\r\n        )\r\n    } else if (type === Personal) {\r\n        return (\r\n            <div className=\"timeline-badge-personal\">\r\n                <i className=\"fa fa-user\"/>\r\n            </div>\r\n        )\r\n    } else if (type === Engagement) {\r\n        return (\r\n            <div className=\"timeline-badge-engagement\">\r\n                <i className=\"fa fa-walking\"/>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Badge;\r\n","import React from 'react';\r\nimport Badge from \"./Badge\";\r\n\r\nconst Activity = ({title, type, date, text}) => {\r\n\r\n    return (\r\n        <div className=\"timeline-item\">\r\n            <Badge type={type}/>\r\n            <div className=\"card timeline-panel\">\r\n                <div className=\"card-body\">\r\n                    <h5>{title}</h5>\r\n                    <span className=\"text-muted\">{date}</span>\r\n                    <p className=\"m-0\">{text}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Activity;\r\n","import React from 'react';\r\nimport Activity from \"./Activity\";\r\nimport {activityData} from \"../data/activity_data\";\r\n\r\nconst Timeline = () => {\r\n    return (\r\n        <div className=\"timeline\">\r\n            {\r\n                activityData.map((item, i) => {\r\n                    return <Activity key={i} title={item.title} type={item.type} date={item.date} text={item.text}/>\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Timeline;\r\n","import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <nav className=\"navbar navbar-light sticky-top bg-light\">\r\n            <a className=\"navbar-brand\" href=\"#\">\r\n                <img src=\"/images/jensbnt.png\" width=\"30\" height=\"30\"\r\n                     className=\"d-inline-block align-top\" alt=\"\"/>\r\n                <span className=\"ml-3\">Jens Beernaert</span>\r\n            </a>\r\n        </nav>\r\n    )\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\nimport \"./styles.scss\";\nimport Timeline from \"./components/Timeline\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n    return (\n        <>\n            <Header/>\n            <div className=\"container\">\n                <Timeline/>\n            </div>\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}